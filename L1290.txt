1/29/18 lecture: Dynamic allocation, array doubling, linked lists

Array doubling
  arrays are of fixed size
  array doubling algorithm dynamically creates a new array of double the size of the original array
  copy over the values fro the old array to the new one
  free the memory assigned to the old array

  [1] [2]
    double
    [1] [2] [3] [4]
      double
      [1] [2] [3] [4] [5] [6] [7] [8]
        ...

  int *p
  int size = 2
  p = new int[size]    p = [] []
  p[0] = 1
  p[1] = 2             p = [1] [2]

  array is full, double

  size = size*2
  int *p2 = new int[size]   p2 = [] [] [] []
  p2[0] = p[0]
  p2[1] = p[1]              p2 = [1] [2] [] []
  delete[] p

  write more data to p2

  p2[2] = 3
  p2[3] = 4           p2 = [1] [2] [3] [4]
  p = p2          p = p2 = [1] [2] [3] [4]

  you can repeat again using p2 as the new array

  size = size*2
  p2 = new int[size]  p2 = [] [] [] [] [] [] [] []
  p and p2 no longer point to the same memory

  array doubling is expensive

Linked Lists: Allocate memory for individual items as needed, then link with pointers
  [data][pointer] -> [data][pointer] -> [data][pointer] -> [data][null]
  end of the list should always point to null
  each element is called a 'node'
  simplest node defined with a struct
    struct node{
    int key; //data
    node *next
    node(int k, node *n){
      key = k;
      next = n;
      }
    }

    this is a singly linked list (pointers only go in one direction)
    doubly linked list has pointers for next and previous data struct
      [pointer][data][pointer]<->[pointer][data][pointer]

  EX: Create a single linked list with 4 nodes with variables 5, 6, 7
    [5][*] -> [6][*]->[7][*]

    node *x = new node(5,null)
    node *x2 = new node(6,null)
    x -> next = x2

    x -> next stores address of x2

    [5][x2] -> [5][null]

    node *x3 = new node(7,null)
    x2 -> next = x3

    [5][x2]->[6][x3]->[7][null]
